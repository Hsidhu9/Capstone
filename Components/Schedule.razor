@page "/schedules"
@namespace Shift_Picker.Components
@inherits Shift_Picker.Components.ScheduleVM
@inject IJSRuntime IJSRunTime;

<head>
    <style>
        * {
            margin: 0;
            border: 0;
        }

        .outer {
            position: relative;
        }

        .calendar {
            margin: 0 auto;
            max-width: 1280px;
            min-width: 500px;
            box-shadow: 0px 30px 50px rgba(0, 0, 0, 0.2),0px 3px 7px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .wrap {
            overflow-x: hidden;
            overflow-y: scroll;
            max-width: 1280px;
            border-radius: 8px;
        }

        thead {
            box-shadow: 0px 2px 3px rgba(0, 0, 0, 0.2);
        }

            thead th {
                text-align: center;
                width: 100%;
            }

        header {
            background: #fff;
            padding: 1rem;
            color: rgba(0, 0, 0, 0.7);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            position: relative;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            border-radius: 8px 8px 0px 0px;
        }

            header h1 {
                font-size: 1.25rem;
                text-align: center;
                font-weight: normal;
            }

        tbody {
            position: relative;
            top: 100px;
        }

        table {
            background: #fff;
            width: 100%;
            height: 100%;
            table-layout: fixed;
        }



        .headcol {
            font-size: 0.875rem;
            font-weight: 500;
            text-align: center;
            position: relative;
        }

        thead th {
            font-size: 1rem;
            font-weight: bold;
            color: rgba(0, 0, 0, 0.9);
        }

        thead {
            z-index: 2;
            background: white;
            border-bottom: 2px solid #ddd;
        }

        tr, tr td {
            height: 20px;
            border: 2px solid #ddd;
        }

        td {
            text-align: center;
        }

        tr:nth-child(odd) td:not(.headcol) {
            border-bottom: 1px solid #e8e8e8;
        }

        tr:nth-child(even) td:not(.headcol) {
            border-bottom: 1px solid #eee;
        }

        tr td {
            border-right: 1px solid #eee;
            padding: 0;
            white-space: nowrap;
            word-wrap: normal;
        }

        tbody tr td {
            position: relative;
            vertical-align: top;
            height: 40px;
            padding: 0.25rem 0.25rem 0 0.25rem;
            width: auto;
        }

        .secondary {
            color: rgba(0, 0, 0, 0.4);
        }

        .inactive{
            cursor : none;
            background-color : lightgray
        }

        /*.checkbox {
            display: none;
        }

            .checkbox + label {
                border: 0;
                outline: 0;
                width: 100px;
                height: 100px;
                background: white;
                color: transparent;
                display: block;
                display: none;
            }

            .checkbox:checked + label {
                border: 0;
                outline: 0;
                width: 100%;
                height: 100%;
                background: red;
                color: transparent;
                display: inline-block;
            }*/

        .event {
            background: #00B4FC;
            color: white;
            border-radius: 2px;
            text-align: left;
            font-size: 0.875rem;
            z-index: 2;
            padding: 0.5rem;
            transition: all 0.2s;
            cursor: pointer;
        }

            .event:hover {
                box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);
                background: #00B4FC;
            }

            .event.double {
                height: 200%;
            }


        td:hover:after {
            content: "+";
            vertical-align: middle;
            font-size: 1.875rem;
            font-weight: 100;
            color: rgba(0, 0, 0, 0.5);
            position: absolute;
        }

        button.secondary {
            border: 1px solid rgba(0, 0, 0, 0.1);
            background: white;
            padding: 0.5rem 0.75rem;
            font-size: 14px;
            border-radius: 2px;
            color: rgba(0, 0, 0, 0.5);
            box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            font-weight: 500;
        }

            button.secondary:hover {
                background: #fafafa;
            }

            button.secondary:active {
                box-shadow: none;
            }

            button.secondary:focus {
                outline: 0;
            }

       
        .today {
            color: red;
        }

        .now {
            box-shadow: 0px -1px 0px 0px red;
        }

        .icon {
            font-size: 1.5rem;
            margin: 0 1rem;
            text-align: center;
            cursor: pointer;
            vertical-align: middle;
            position: relative;
            top: -2px;
        }

            .icon:hover {
                color: red;
            }
    </style>

</head>

<div class="calendar">

    <header>
        <button class="secondary" style="align-self: flex-start; flex: 0 0 1">Today</button>
        <div class="calendar__title" style="display: flex; justify-content: center; align-items: center">
            <div class="icon secondary chevron_left" @onclick="GetLastWeek">‹</div>
            <h1 class="" style="flex: 1;"></h1>
            <span></span><strong>@BeginOfWeek - @EndOfWeek</strong>
            <div class="icon secondary chevron_left" @onclick="GetNextWeek">›</div>
        </div>
        <div style="align-self: flex-start; flex: 0 0 1"></div>
    </header>

    <div class="outer">
        <table>
            <thead>
                <tr>
                    <th class="headcol"></th>
                    <th class="secondary"><button class="btn btn-primary">Sun<br />@Day1Week.ToString("M")</button></th>
                    <th><button class="btn btn-primary">Mon<br />@Day2Week.ToString("M")</button></th>
                    <th><button class="btn btn-primary">Tue<br />@Day3Week.ToString("M")</button></th>
                    <th><button class="btn btn-primary">Wed<br />@Day4Week.ToString("M")</button></th>
                    <th><button class="btn btn-primary">Thu<br />@Day5Week.ToString("M")</button></th>
                    <th><button class="btn btn-primary">Fri<br />@Day6Week.ToString("M")</button></th>
                    <th class="secondary"><button class="btn btn-primary">Sat<br />@Day7Week.ToString("M")</button></th>
                </tr>
            </thead>
        </table>

        <div class="wrap">
            <table class="offset">
                <tbody>
                    @foreach (int j in allDayHours)
                    {
                    <tr>
                        <td class="headcol">@j:00</td>
                        @foreach (var day in AllDaysOfWeek)
                        {

                            @if (SelectedShiftsElementIds.ContainsKey(day.Date.ToString() + j))
                            {
                                @if (day.AddHours(j) >= DateTime.Now)
                                {
                                    <td class="event"
                                        @onclick="() =>
                                                  {
                                                      if (SelectedShiftsElementIds.ContainsKey(day.Date.ToString() + j))
                                                          OpenConfirmShiftDialog(SelectedShiftsElementIds[day.Date.ToString() + j].GetValueOrDefault());
                                                  }" />
                                }
                                else
                                {
                                    //incase the number of employees needed is equal to number of
                                    //shift details then event class needs to be removed
                                    <td class="event inactive"></td>
                                }

                            }
                            else
                            {
                                @if (day.AddHours(j) >= DateTime.Now )
                                {
                                    <td class="headcol"
                                        @onclick="() => SetStartTimeAndDate(day, j.ToString())" />
                                                  
                                }
                                else
                                {
                                    <td class="inactive"></td>
                                }

                            }
                        }

                    </tr>

                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div class="@modalClass1" tabindex="-1" style="display: @displayMode1;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Drop Shift</h5>
                <button class="close" @onclick="ToggleModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div>
                <div class="modal-body">
                    <div class="row">
                        <div class=" col-md-4">
                            <h6>Start Time: </h6><input type="time" id="startTime" name="Time1"
                                                        min="00:00" max="23:00"
                                                        @bind="SelectedStartDateTime"
                                                        required>
                        </div>
                        <div class="col-md-4">
                            <h6>End Time:</h6><input type="time" id="endTime" name="Time2"
                                                     min="00:00" max="23:00"
                                                     @bind="SelectedEndDateTime"
                                                     required>
                        </div>
                        <div class="col-md-4">
                            <h6>Employees</h6><input type="number" id="employees" name="employeesNeeded"
                                                     min="1" max="100"
                                                     @bind="NumberOfEmployeesNeeded"
                                                     required>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ToggleModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="AddShiftAsync">Apply</button>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <span>@ErrorMessage</span>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="@modalClass2" tabindex="-1" style="display: @displayMode2;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Accept Shift</h5>
                <button class="close" @onclick="ToggleModal2" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div>
                <div class="modal-body">
                    <div class="row">
                        selected
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="ToggleModal2">Cancel</button>
                    <button class="btn btn-primary" @onclick="ConfirmShift">Apply</button>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <span>@ErrorMessage</span>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
}


@code {
    bool openModal1 = false;
    string modalClass1 => openModal1 ? "modal fade show" : "modal fade";
    string displayMode1 => openModal1 ? "block" : "none";

    bool openModal2 = false;
    string modalClass2 => openModal2 ? "modal fade show" : "modal fade";
    string displayMode2 => openModal2 ? "block" : "none";

    [Parameter]
    public RenderFragment ChildContent { get; set; }



    private void ToggleModal()
    {
        openModal1 = !openModal1;
        StateHasChanged();
    }

    private void ToggleModal2()
    {
        openModal2 = !openModal2;
        StateHasChanged();
    }

    private DateTime SelectedDay { get; set; }

    private int? SelectedShiftId { get; set; }


    private void SetStartTimeAndDate(DateTime dayOfWeek, string hourOfDay)
    {
        if(LoggedInUser.User.RoleId != 4)
        {
            ToggleModal();
            //Storing the date, so that if the start date time and end datetime could be assigned to selected day
            SelectedDay = dayOfWeek.Date;
            SelectedStartDateTime = dayOfWeek.AddHours(Convert.ToDouble(hourOfDay));
            SelectedEndDateTime = SelectedStartDateTime.AddHours(2);
        }


    }

    private void OpenConfirmShiftDialog(int shiftId)
    {
        SelectedShiftId = shiftId;
        ToggleModal2();
    }

    private void ConfirmShift()
    {
        SelectedShiftAsEmployee(SelectedShiftId.GetValueOrDefault());
        ToggleModal2();
    }

    protected void AddShiftAsync()
    {
        SelectedStartDateTime = new DateTime(SelectedDay.Year, SelectedDay.Month, SelectedDay.Day, SelectedStartDateTime.Hour, 0, 0);
        SelectedEndDateTime = new DateTime(SelectedDay.Year, SelectedDay.Month, SelectedDay.Day, SelectedEndDateTime.Hour, 0, 0);

        if (SelectedStartDateTime >= SelectedEndDateTime || NumberOfEmployeesNeeded <= 0)
            ErrorMessage = "Selected Start Time is greater or equal to end time";
        else
        {
            for (int i = SelectedStartDateTime.Hour; i <= SelectedEndDateTime.Hour; i++)
            {
                SelectedShiftsElementIds.Add(SelectedStartDateTime.Date.ToString() + i, null);
            }

            AddShifts(SelectedStartDateTime, SelectedEndDateTime, NumberOfEmployeesNeeded);
        }
        ToggleModal();
    }




}
